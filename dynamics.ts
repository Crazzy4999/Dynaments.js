//Copyright © 2022 Fábián Álmos László

interface buildConfig {
        id: string
        class: string
        tag: string
        index: number
}

interface styleConfig {
    accentColor?: string,
    additiveSymbols?: string,
    alignContent?: string,
    alignItems?: string,
    alignSelf?: string,
    alignmentBaseline?: string,
    all?: string,
    animation?: string,
    animationDelay?: string,
    animationDirection?: string,
    animationDuration?: string,
    animationFillMode?: string,
    animationIterationCount?: string,
    animationName?: string,
    animationPlayState?: string,
    animationTimingFunction?: string,
    appRegion?: string,
    appearance?: string,
    ascentOverride?: string,
    aspectRatio?: string,
    backdropFilter?: string,
    backfaceVisibility?: string,
    background?: string,
    backgroundAttachment?: string,
    backgroundBlendMode?: string,
    backgroundClip?: string,
    backgroundColor?: string,
    backgroundImage?: string,
    backgroundOrigin?: string,
    backgroundPosition?: string,
    backgroundPositionX?: string,
    backgroundPositionY?: string,
    backgroundRepeat?: string,
    backgroundRepeatX?: string,
    backgroundRepeatY?: string,
    backgroundSize?: string,
    basePalette?: string,
    baselineShift?: string,
    blockSize?: string,
    border?: string,
    borderBlock?: string,
    borderBlockColor?: string,
    borderBlockEnd?: string,
    borderBlockEndColor?: string,
    borderBlockEndStyle?: string,
    borderBlockEndWidth?: string,
    borderBlockStart?: string,
    borderBlockStartColor?: string,
    borderBlockStartStyle?: string,
    borderBlockStartWidth?: string,
    borderBlockStyle?: string,
    borderBlockWidth?: string,
    borderBottom?: string,
    borderBottomColor?: string,
    borderBottomLeftRadius?: string,
    borderBottomRightRadius?: string,
    borderBottomStyle?: string,
    borderBottomWidth?: string,
    borderCollapse?: string,
    borderColor?: string,
    borderEndEndRadius?: string,
    borderEndStartRadius?: string,
    borderImage?: string,
    borderImageOutset?: string,
    borderImageRepeat?: string,
    borderImageSlice?: string,
    borderImageSource?: string,
    borderImageWidth?: string,
    borderInline?: string,
    borderInlineColor?: string,
    borderInlineEnd?: string,
    borderInlineEndColor?: string,
    borderInlineEndStyle?: string,
    borderInlineEndWidth?: string,
    borderInlineStart?: string,
    borderInlineStartColor?: string,
    borderInlineStartStyle?: string,
    borderInlineStartWidth?: string,
    borderInlineStyle?: string,
    borderInlineWidth?: string,
    borderLeft?: string,
    borderLeftColor?: string,
    borderLeftStyle?: string,
    borderLeftWidth?: string,
    borderRadius?: string,
    borderRight?: string,
    borderRightColor?: string,
    borderRightStyle?: string,
    borderRightWidth?: string,
    borderSpacing?: string,
    borderStartEndRadius?: string,
    borderStartStartRadius?: string,
    borderStyle?: string,
    borderTop?: string,
    borderTopColor?: string,
    borderTopLeftRadius?: string,
    borderTopRightRadius?: string,
    borderTopStyle?: string,
    borderTopWidth?: string,
    borderWidth?: string,
    bottom?: string,
    boxShadow?: string,
    boxSizing?: string,
    breakAfter?: string,
    breakBefore?: string,
    breakInside?: string,
    bufferedRendering?: string,
    captionSide?: string,
    caretColor?: string,
    clear?: string,
    clip?: string,
    clipPath?: string,
    clipRule?: string,
    color?: string,
    colorInterpolation?: string,
    colorInterpolationFilters?: string,
    colorRendering?: string,
    colorScheme?: string,
    columnCount?: string,
    columnFill?: string,
    columnGap?: string,
    columnRule?: string,
    columnRuleColor?: string,
    columnRuleStyle?: string,
    columnRuleWidth?: string,
    columnSpan?: string,
    columnWidth?: string,
    columns?: string,
    contain?: string,
    containIntrinsicBlockSize?: string,
    containIntrinsicHeight?: string,
    containIntrinsicInlineSize?: string,
    containIntrinsicSize?: string,
    containIntrinsicWidth?: string,
    container?: string,
    containerName?: string,
    containerType?: string,
    content?: string,
    contentVisibility?: string,
    counterIncrement?: string,
    counterReset?: string,
    counterSet?: string,
    cursor?: string,
    cx?: string,
    cy?: string,
    d?: string,
    descentOverride?: string,
    direction?: string,
    display?: string,
    dominantBaseline?: string,
    emptyCells?: string,
    fallback?: string,
    fill?: string,
    fillOpacity?: string,
    fillRule?: string,
    filter?: string,
    flex?: string,
    flexBasis?: string,
    flexDirection?: string,
    flexFlow?: string,
    flexGrow?: string,
    flexShrink?: string,
    flexWrap?: string,
    float?: string,
    floodColor?: string,
    floodOpacity?: string,
    font?: string,
    fontDisplay?: string,
    fontFamily?: string,
    fontFeatureSettings?: string,
    fontKerning?: string,
    fontOpticalSizing?: string,
    fontPalette?: string,
    fontSize?: string,
    fontStretch?: string,
    fontStyle?: string,
    fontSynthesis?: string,
    fontSynthesisSmallCaps?: string,
    fontSynthesisStyle?: string,
    fontSynthesisWeight?: string,
    fontVariant?: string,
    fontVariantCaps?: string,
    fontVariantEastAsian?: string,
    fontVariantLigatures?: string,
    fontVariantNumeric?: string,
    fontVariationSettings?: string,
    fontWeight?: string,
    forcedColorAdjust?: string,
    gap?: string,
    grid?: string,
    gridArea?: string,
    gridAutoColumns?: string,
    gridAutoFlow?: string,
    gridAutoRows?: string,
    gridColumn?: string,
    gridColumnEnd?: string,
    gridColumnGap?: string,
    gridColumnStart?: string,
    gridGap?: string,
    gridRow?: string,
    gridRowEnd?: string,
    gridRowGap?: string,
    gridRowStart?: string,
    gridTemplate?: string,
    gridTemplateAreas?: string,
    gridTemplateColumns?: string,
    gridTemplateRows?: string,
    height?: string,
    hyphens?: string,
    imageOrientation?: string,
    imageRendering?: string,
    inherits?: string,
    initialValue?: string,
    inlineSize?: string,
    inset?: string,
    insetBlock?: string,
    insetBlockEnd?: string,
    insetBlockStart?: string,
    insetInline?: string,
    insetInlineEnd?: string,
    insetInlineStart?: string,
    isolation?: string,
    justifyContent?: string,
    justifyItems?: string,
    justifySelf?: string,
    left?: string,
    letterSpacing?: string,
    lightingColor?: string,
    lineBreak?: string,
    lineGapOverride?: string,
    lineHeight?: string,
    listStyle?: string,
    listStyleImage?: string,
    listStylePosition?: string,
    listStyleType?: string,
    margin?: string,
    marginBlock?: string,
    marginBlockEnd?: string,
    marginBlockStart?: string,
    marginBottom?: string,
    marginInline?: string,
    marginInlineEnd?: string,
    marginInlineStart?: string,
    marginLeft?: string,
    marginRight?: string,
    marginTop?: string,
    marker?: string,
    markerEnd?: string,
    markerMid?: string,
    markerStart?: string,
    mask?: string,
    maskType?: string,
    maxBlockSize?: string,
    maxHeight?: string,
    maxInlineSize?: string,
    maxWidth?: string,
    maxZoom?: string,
    minBlockSize?: string,
    minHeight?: string,
    minInlineSize?: string,
    minWidth?: string,
    minZoom?: string,
    mixBlendMode?: string,
    negative?: string,
    objectFit?: string,
    objectPosition?: string,
    objectViewBox?: string,
    offset?: string,
    offsetDistance?: string,
    offsetPath?: string,
    offsetRotate?: string,
    opacity?: string,
    order?: string,
    orientation?: string,
    orphans?: string,
    outline?: string,
    outlineColor?: string,
    outlineOffset?: string,
    outlineStyle?: string,
    outlineWidth?: string,
    overflow?: string,
    overflowAnchor?: string,
    overflowClipMargin?: string,
    overflowWrap?: string,
    overflowX?: string,
    overflowY?: string,
    overrideColors?: string,
    overscrollBehavior?: string,
    overscrollBehaviorBlock?: string,
    overscrollBehaviorInline?: string,
    overscrollBehaviorX?: string,
    overscrollBehaviorY?: string,
    pad?: string,
    padding?: string,
    paddingBlock?: string,
    paddingBlockEnd?: string,
    paddingBlockStart?: string,
    paddingBottom?: string,
    paddingInline?: string,
    paddingInlineEnd?: string,
    paddingInlineStart?: string,
    paddingLeft?: string,
    paddingRight?: string,
    paddingTop?: string,
    page?: string,
    pageBreakAfter?: string,
    pageBreakBefore?: string,
    pageBreakInside?: string,
    pageOrientation?: string,
    paintOrder?: string,
    perspective?: string,
    perspectiveOrigin?: string,
    placeContent?: string,
    placeItems?: string,
    placeSelf?: string,
    pointerEvents?: string,
    position?: string,
    prefix?: string,
    quotes?: string,
    r?: string,
    range?: string,
    resize?: string,
    right?: string,
    rotate?: string,
    rowGap?: string,
    rubyPosition?: string,
    rx?: string,
    ry?: string,
    scale?: string,
    scrollBehavior?: string,
    scrollMargin?: string,
    scrollMarginBlock?: string,
    scrollMarginBlockEnd?: string,
    scrollMarginBlockStart?: string,
    scrollMarginBottom?: string,
    scrollMarginInline?: string,
    scrollMarginInlineEnd?: string,
    scrollMarginInlineStart?: string,
    scrollMarginLeft?: string,
    scrollMarginRight?: string,
    scrollMarginTop?: string,
    scrollPadding?: string,
    scrollPaddingBlock?: string,
    scrollPaddingBlockEnd?: string,
    scrollPaddingBlockStart?: string,
    scrollPaddingBottom?: string,
    scrollPaddingInline?: string,
    scrollPaddingInlineEnd?: string,
    scrollPaddingInlineStart?: string,
    scrollPaddingLeft?: string,
    scrollPaddingRight?: string,
    scrollPaddingTop?: string,
    scrollSnapAlign?: string,
    scrollSnapStop?: string,
    scrollSnapType?: string,
    scrollbarGutter?: string,
    shapeImageThreshold?: string,
    shapeMargin?: string,
    shapeOutside?: string,
    shapeRendering?: string,
    size?: string,
    sizeAdjust?: string,
    speak?: string,
    speakAs?: string,
    src?: string,
    stopColor?: string,
    stopOpacity?: string,
    stroke?: string,
    strokeDasharray?: string,
    strokeDashoffset?: string,
    strokeLinecap?: string,
    strokeLinejoin?: string,
    strokeMiterlimit?: string,
    strokeOpacity?: string,
    strokeWidth?: string,
    suffix?: string,
    symbols?: string,
    syntax?: string,
    system?: string,
    tabSize?: string,
    tableLayout?: string,
    textAlign?: string,
    textAlignLast?: string,
    textAnchor?: string,
    textCombineUpright?: string,
    textDecoration?: string,
    textDecorationColor?: string,
    textDecorationLine?: string,
    textDecorationSkipInk?: string,
    textDecorationStyle?: string,
    textDecorationThickness?: string,
    textEmphasis?: string,
    textEmphasisColor?: string,
    textEmphasisPosition?: string,
    textEmphasisStyle?: string,
    textIndent?: string,
    textOrientation?: string,
    textOverflow?: string,
    textRendering?: string,
    textShadow?: string,
    textSizeAdjust?: string,
    textTransform?: string,
    textUnderlineOffset?: string,
    textUnderlinePosition?: string,
    top?: string,
    touchAction?: string,
    transform?: string,
    transformBox?: string,
    transformOrigin?: string,
    transformStyle?: string,
    transition?: string,
    transitionDelay?: string,
    transitionDuration?: string,
    transitionProperty?: string,
    transitionTimingFunction?: string,
    translate?: string,
    unicodeBidi?: string,
    unicodeRange?: string,
    userSelect?: string,
    userZoom?: string,
    vectorEffect?: string,
    verticalAlign?: string,
    visibility?: string,
    webkitAlignContent?: string,
    webkitAlignItems?: string,
    webkitAlignSelf?: string,
    webkitAnimation?: string,
    webkitAnimationDelay?: string,
    webkitAnimationDirection?: string,
    webkitAnimationDuration?: string,
    webkitAnimationFillMode?: string,
    webkitAnimationIterationCount?: string,
    webkitAnimationName?: string,
    webkitAnimationPlayState?: string,
    webkitAnimationTimingFunction?: string,
    webkitAppRegion?: string,
    webkitAppearance?: string,
    webkitBackfaceVisibility?: string,
    webkitBackgroundClip?: string,
    webkitBackgroundOrigin?: string,
    webkitBackgroundSize?: string,
    webkitBorderAfter?: string,
    webkitBorderAfterColor?: string,
    webkitBorderAfterStyle?: string,
    webkitBorderAfterWidth?: string,
    webkitBorderBefore?: string,
    webkitBorderBeforeColor?: string,
    webkitBorderBeforeStyle?: string,
    webkitBorderBeforeWidth?: string,
    webkitBorderBottomLeftRadius?: string,
    webkitBorderBottomRightRadius?: string,
    webkitBorderEnd?: string,
    webkitBorderEndColor?: string,
    webkitBorderEndStyle?: string,
    webkitBorderEndWidth?: string,
    webkitBorderHorizontalSpacing?: string,
    webkitBorderImage?: string,
    webkitBorderRadius?: string,
    webkitBorderStart?: string,
    webkitBorderStartColor?: string,
    webkitBorderStartStyle?: string,
    webkitBorderStartWidth?: string,
    webkitBorderTopLeftRadius?: string,
    webkitBorderTopRightRadius?: string,
    webkitBorderVerticalSpacing?: string,
    webkitBoxAlign?: string,
    webkitBoxDecorationBreak?: string,
    webkitBoxDirection?: string,
    webkitBoxFlex?: string,
    webkitBoxOrdinalGroup?: string,
    webkitBoxOrient?: string,
    webkitBoxPack?: string,
    webkitBoxReflect?: string,
    webkitBoxShadow?: string,
    webkitBoxSizing?: string,
    webkitClipPath?: string,
    webkitColumnBreakAfter?: string,
    webkitColumnBreakBefore?: string,
    webkitColumnBreakInside?: string,
    webkitColumnCount?: string,
    webkitColumnGap?: string,
    webkitColumnRule?: string,
    webkitColumnRuleColor?: string,
    webkitColumnRuleStyle?: string,
    webkitColumnRuleWidth?: string,
    webkitColumnSpan?: string,
    webkitColumnWidth?: string,
    webkitColumns?: string,
    webkitFilter?: string,
    webkitFlex?: string,
    webkitFlexBasis?: string,
    webkitFlexDirection?: string,
    webkitFlexFlow?: string,
    webkitFlexGrow?: string,
    webkitFlexShrink?: string,
    webkitFlexWrap?: string,
    webkitFontFeatureSettings?: string,
    webkitFontSmoothing?: string,
    webkitHighlight?: string,
    webkitHyphenateCharacter?: string,
    webkitJustifyContent?: string,
    webkitLineBreak?: string,
    webkitLineClamp?: string,
    webkitLocale?: string,
    webkitLogicalHeight?: string,
    webkitLogicalWidth?: string,
    webkitMarginAfter?: string,
    webkitMarginBefore?: string,
    webkitMarginEnd?: string,
    webkitMarginStart?: string,
    webkitMask?: string,
    webkitMaskBoxImage?: string,
    webkitMaskBoxImageOutset?: string,
    webkitMaskBoxImageRepeat?: string,
    webkitMaskBoxImageSlice?: string,
    webkitMaskBoxImageSource?: string,
    webkitMaskBoxImageWidth?: string,
    webkitMaskClip?: string,
    webkitMaskComposite?: string,
    webkitMaskImage?: string,
    webkitMaskOrigin?: string,
    webkitMaskPosition?: string,
    webkitMaskPositionX?: string,
    webkitMaskPositionY?: string,
    webkitMaskRepeat?: string,
    webkitMaskRepeatX?: string,
    webkitMaskRepeatY?: string,
    webkitMaskSize?: string,
    webkitMaxLogicalHeight?: string,
    webkitMaxLogicalWidth?: string,
    webkitMinLogicalHeight?: string,
    webkitMinLogicalWidth?: string,
    webkitOpacity?: string,
    webkitOrder?: string,
    webkitPaddingAfter?: string,
    webkitPaddingBefore?: string,
    webkitPaddingEnd?: string,
    webkitPaddingStart?: string,
    webkitPerspective?: string,
    webkitPerspectiveOrigin?: string,
    webkitPerspectiveOriginX?: string,
    webkitPerspectiveOriginY?: string,
    webkitPrintColorAdjust?: string,
    webkitRtlOrdering?: string,
    webkitRubyPosition?: string,
    webkitShapeImageThreshold?: string,
    webkitShapeMargin?: string,
    webkitShapeOutside?: string,
    webkitTapHighlightColor?: string,
    webkitTextCombine?: string,
    webkitTextDecorationsInEffect?: string,
    webkitTextEmphasis?: string,
    webkitTextEmphasisColor?: string,
    webkitTextEmphasisPosition?: string,
    webkitTextEmphasisStyle?: string,
    webkitTextFillColor?: string,
    webkitTextOrientation?: string,
    webkitTextSecurity?: string,
    webkitTextSizeAdjust?: string,
    webkitTextStroke?: string,
    webkitTextStrokeColor?: string,
    webkitTextStrokeWidth?: string,
    webkitTransform?: string,
    webkitTransformOrigin?: string,
    webkitTransformOriginX?: string,
    webkitTransformOriginY?: string,
    webkitTransformOriginZ?: string,
    webkitTransformStyle?: string,
    webkitTransition?: string,
    webkitTransitionDelay?: string,
    webkitTransitionDuration?: string,
    webkitTransitionProperty?: string,
    webkitTransitionTimingFunction?: string,
    webkitUserDrag?: string,
    webkitUserModify?: string,
    webkitUserSelect?: string,
    webkitWritingMode?: string,
    whiteSpace?: string,
    widows?: string,
    width?: string,
    willChange?: string,
    wordBreak?: string,
    wordSpacing?: string,
    wordWrap?: string,
    writingMode?: string,
    x?: string,
    y?: string,
    zIndex?: string,
    zoom?: string
}

class DynamicStyle
{
    public _style: styleConfig = {}
    constructor(style: styleConfig, id?: string) {
        this._style = style
    }
}

class DynamicElement
{
    private _type: string = "div"
    private _inputType: string = "text"
    private _id: string = ""
    private _text: string = ""
    private _innerHTML: string = ""
    private _style: styleConfig = {}
    private _classList: string = ""

    private _parent: DynamicElement = this
    private _children: DynamicElement[] = []
    private _builtChildren: HTMLElement[] = []

    private setTexts = <K extends keyof HTMLElementTagNameMap>(e: HTMLElementTagNameMap[K]) => { e instanceof HTMLInputElement ? e.value = this._text : e.innerText = this._text; e.nodeValue = this._text; e.textContent = this._text } //TODO: implementation for HTMLINPUTELEMENTS, like: text, textarea, button
    private check = (val: any) => { return (val !== "" || val !== null || val !== undefined) }
    private appendByClass = (c: string, i: number, e: HTMLElement) => { const n = document.getElementsByClassName(c).item(i); if(n !== null) { n.append(e); this.setTexts(e); } }
    private appendByTag = (t: string, i: number, e: HTMLElement) => { document.getElementsByTagName(t).item(i)?.append(e); this.setTexts(e); }

    public type(type: string) {
        this._type = type
        return this
    }

    public inputType(inputType: string)
    {
        this._inputType = inputType
        return this
    }

    public id(id: string) {
        this._id = id
        return this
    }

    public text(text: string) {
        this._text = text
        return this
    }

    public innerHTML(innerHTML: string) {
        this._innerHTML = innerHTML
        return this
    }

    public style(style: styleConfig) {
        this._style = style
        return this
    }

    public class(classList: string) {
        this._classList = classList
        return this
    }

    public addChild() {
        const child: DynamicElement = new DynamicElement()
        child._parent = this
        this._children.push(child)
        return child
    }

    public buildChild() {
        this._parent._builtChildren.push(this.build())
        return this._parent
    }

    public build<K extends keyof HTMLElementTagNameMap>(appendTo?: buildConfig) {
        const element: HTMLElementTagNameMap[K] = document.createElement(<K>this._type)
        if(element instanceof HTMLInputElement) element.type = this._inputType
        if(this._id !== "") element.id = this._id
        element.innerHTML = this._innerHTML
        
        if(this._style instanceof DynamicStyle) {
            Object.entries(Object.entries(new DynamicStyle(this._style)._style)[0][1]).forEach((s: any) => element.style[s[0]] = s[1])
        } else Object.entries(this._style).forEach((s: any) => element.style[s[0]] = s[1])
        this._classList.split(" ").forEach(c => { if(this._classList.split(" ")[0] !== "") {
            element.classList.add(c)
        }})

        if(appendTo !== undefined/* || appendTo !== null*/) {
            if(!this.check(appendTo.id)) {
                if(this.check(appendTo.class)) {
                    this.check(appendTo.index) ? this.appendByClass(appendTo.class, appendTo.index, element) : this.appendByClass(appendTo.class, 0, element)
                    return element
                }
                if(this.check(appendTo.tag)) {
                    this.check(appendTo.index) ? this.appendByTag(appendTo.tag, appendTo.index, element) : this.appendByTag(appendTo.tag, 0, element)
                    return element
                }
            } else {
                document.getElementById(appendTo.id)?.append(element)
                this.setTexts(element)
            }
        }

        this._builtChildren.forEach(child => element.append(child))
        return element
    }
}

export default DynamicElement
export { DynamicElement, DynamicStyle }